plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
}

group = 'ktb.leafresh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// Database
	runtimeOnly 'com.mysql:mysql-connector-j'
	
	// H2 for documentation generation
	runtimeOnly 'com.h2database:h2'
	
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	// Mock 관련 - Swagger 프로파일에서 사용
	implementation 'org.mockito:mockito-core:5.2.0'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// testcontainers
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'com.redis:testcontainers-redis:2.2.2'

	// QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.redisson:redisson-spring-boot-starter:3.23.4'

	// RedisBloom + Jedis
	implementation 'com.github.RedisBloom:JRedisBloom:2.1.0'
	implementation 'redis.clients:jedis:3.8.0'

	// WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Google Cloud Storage
	implementation 'com.google.protobuf:protobuf-java:3.25.1'
	implementation group: 'com.google.cloud', name: 'google-cloud-storage', version: '2.40.1'

	// GCP Pub/Sub
	implementation 'com.google.cloud:google-cloud-pubsub:1.124.0'
	implementation 'io.grpc:grpc-netty-shaded:1.62.2'
	implementation 'io.grpc:grpc-alts:1.62.2'
	implementation 'io.grpc:grpc-auth:1.62.2'
	implementation 'io.grpc:grpc-protobuf:1.62.2'
	implementation 'io.grpc:grpc-stub:1.62.2'

	// ShedLock
	implementation 'net.javacrumbs.shedlock:shedlock-spring:5.10.0'
	implementation 'net.javacrumbs.shedlock:shedlock-provider-redis-spring:5.10.0'

	// Micrometer Prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// p6spy for SQL profiling
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'

	// AWS
	implementation("com.amazonaws:aws-java-sdk-s3:1.12.700")
	implementation("com.amazonaws:aws-java-sdk-sqs:1.12.700")

	// sha256
	implementation 'commons-codec:commons-codec:1.15'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jacoco {
	toolVersion = "0.8.10"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}

	classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/dto/**',
						'**/enums/**',
						'**/*Request*',
						'**/*Response*',
						'**/Q*',
						'**/config/**'
				])
			})
	)
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = [
					'**/dto/**',
					'**/enums/**',
					'**/*Request*',
					'**/*Response*',
					'**/Q*',
					'**/config/**'
			]
			limit {
				minimum = 0.80
			}
		}
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

// Spring Boot JAR 설정 확실히 하기
jar {
	enabled = false
}

bootJar {
	enabled = true
	archiveClassifier = ''
	mainClass = 'ktb.leafresh.backend.BackendApplication'
	
	// Manifest에 명시적으로 Main-Class 추가
	manifest {
		attributes(
			'Main-Class': 'org.springframework.boot.loader.launch.JarLauncher',
			'Start-Class': 'ktb.leafresh.backend.BackendApplication',
			'Implementation-Version': archiveVersion,
			'Built-By': System.getProperty('user.name'),
			'Build-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"),
			'Created-By': "Gradle ${gradle.gradleVersion}",
			'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
			'Multi-Release': 'true'
		)
	}
	
	// 실행 가능한 JAR인지 검증
	doLast {
		def jarFile = archiveFile.get().asFile
		println "✅ Executable JAR created: ${jarFile.absolutePath}"
		println "JAR size: ${jarFile.length()} bytes"
		
		// JAR 파일의 메니페스트 확인
		def manifest = new java.util.jar.JarFile(jarFile).manifest
		def mainClass = manifest.mainAttributes.getValue('Main-Class')
		def startClass = manifest.mainAttributes.getValue('Start-Class')
		
		println "Main-Class: ${mainClass}"
		println "Start-Class: ${startClass}"
		
		if (!mainClass || !startClass) {
			throw new GradleException("JAR 파일에 Main-Class 또는 Start-Class가 없습니다!")
		}
	}
}

// OpenAPI 문서 생성을 위한 태스크
task generateOpenApiDocs(type: JavaExec) {
	group = 'documentation'
	description = 'Generate OpenAPI documentation as JSON'
	
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'ktb.leafresh.backend.BackendApplication'
	
	systemProperty 'spring.profiles.active', 'swagger'
	
	doFirst {
		file("${buildDir}").mkdirs()
	}
}

// 로컬에서 Swagger UI 실행하는 태스크
task runSwagger(type: JavaExec) {
	group = 'application'
	description = 'Run application with Swagger UI for documentation'
	
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'ktb.leafresh.backend.BackendApplication'
	
	systemProperty 'spring.profiles.active', 'swagger'
	
	doFirst {
		println "Starting Swagger UI server..."
		println "Access Swagger UI at: http://localhost:8080/swagger-ui.html"
		println "API Docs JSON at: http://localhost:8080/v3/api-docs"
	}
}
