name: Deploy Swagger Documentation

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build and extract Swagger JSON
      run: |
        # 애플리케이션 빌드
        ./gradlew build -x test
        
        # 백그라운드에서 애플리케이션 시작 (swagger 프로파일 사용)
        nohup java -jar build/libs/*.jar \
          --spring.profiles.active=swagger \
          --server.port=8080 > app.log 2>&1 &
        
        # 애플리케이션이 시작될 때까지 대기 (더 긴 시간과 더 자세한 로그)
        echo "Waiting for application to start..."
        for i in {1..90}; do
          if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "Application is ready!"
            break
          fi
          echo "Waiting... ($i/90)"
          if [ $i -eq 30 ] || [ $i -eq 60 ]; then
            echo "Current application log:"
            tail -20 app.log
          fi
          sleep 2
        done
        
        # 최종 상태 확인
        if ! curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
          echo "❌ Application failed to start. Last 50 lines of log:"
          tail -50 app.log
          exit 1
        fi
        
        # Swagger JSON 다운로드
        echo "Downloading Swagger JSON..."
        if curl -f -o swagger.json http://localhost:8080/v3/api-docs; then
          echo "✅ Swagger JSON downloaded successfully"
          echo "JSON size: $(wc -c < swagger.json) bytes"
        else
          echo "❌ Failed to download Swagger JSON"
          echo "Application log:"
          tail -50 app.log
          exit 1
        fi
        
        # 애플리케이션 종료
        pkill -f "java -jar" || true
        
    - name: Create Swagger UI
      run: |
        mkdir -p docs
        
        # Swagger UI 파일들 생성
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ko">
        <head>
          <meta charset="UTF-8">
          <title>Leafresh API Documentation</title>
          <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css" />
          <style>
            html {
              box-sizing: border-box;
              overflow: -moz-scrollbars-vertical;
              overflow-y: scroll;
            }
            *, *:before, *:after {
              box-sizing: inherit;
            }
            body {
              margin:0;
              background: #fafafa;
            }
          </style>
        </head>
        <body>
          <div id="swagger-ui"></div>
          <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js"></script>
          <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js"></script>
          <script>
            window.onload = function() {
              const ui = SwaggerUIBundle({
                url: './swagger.json',
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                  SwaggerUIBundle.presets.apis,
                  SwaggerUIStandalonePreset
                ],
                plugins: [
                  SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
              });
            };
          </script>
        </body>
        </html>
        EOF
        
        # Swagger JSON 파일 복사
        cp swagger.json docs/
        
        # README 생성
        cat > docs/README.md << 'EOF'
        # Leafresh API Documentation
        
        이 페이지는 Leafresh 백엔드 API의 문서입니다.
        
        ## 사용 방법
        
        - [API 문서 보기](https://100-hours-a-week.github.io/15-Leafresh-BE/)
        - [Swagger JSON 다운로드](https://100-hours-a-week.github.io/15-Leafresh-BE/swagger.json)
        
        ## API 엔드포인트
        
        ### 개발 환경
        - Base URL: `https://springboot.dev-leafresh.app`
        - Swagger UI: `https://springboot.dev-leafresh.app/swagger-ui.html`
        
        ### 프로덕션 환경
        - Base URL: `https://api.leafresh.app`
        - Swagger UI: `https://api.leafresh.app/swagger-ui.html`
        
        ## 인증
        
        대부분의 API는 JWT 토큰 인증이 필요합니다. 다음 헤더를 포함하여 요청하세요:
        
        ```
        Authorization: Bearer YOUR_JWT_TOKEN
        ```
        
        ## 주요 API 그룹
        
        - **인증 (Auth)**: 로그인, 로그아웃, 토큰 갱신
        - **멤버 (Members)**: 사용자 관리
        - **챌린지 (Challenges)**: 개인/그룹 챌린지 관리
        - **검증 (Verifications)**: AI 기반 활동 검증
        - **상점 (Store)**: 상품 및 주문 관리
        - **챗봇 (Chatbot)**: AI 추천 서비스
        - **이미지 (Images)**: 이미지 업로드 및 관리
        EOF
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        force_orphan: true
