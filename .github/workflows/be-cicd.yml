name: Backend CI/CD
 
on:
  pull_request:
    branches: ["develop", "main"]
  push:
    branches: ["develop", "main"]
    tags:
      - 'v*-dev'
      - 'v*'

jobs:
  unit-test:                                    # Îã®ÏúÑ ÌÖåÏä§Ìä∏Î•º ÏàòÌñâÌïòÎäî Job (develop Î∏åÎûúÏπò PR ÎåÄÏÉÅ)
    name: Unit Test
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3              # ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ

      - name: Set up JDK 21                    # Java 21 ÌôòÍ≤Ω ÏÑ§Ï†ï
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21

      - name: Grant Gradle permission          # gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies        # Gradle Ï∫êÏãúÎ°ú ÎπåÎìú ÏÜçÎèÑ Ìñ•ÏÉÅ
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('build.gradle.kts', 'build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run Tests                        # Îã®ÏúÑ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
        run: ./gradlew test

  build-dev:                                    # develop Î∏åÎûúÏπòÏóêÏÑú Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
    name: Build and Push Docker (dev)
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
      (github.event_name == 'pull_request' && github.base_ref == 'develop' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3              # ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ

      - name: Set GCP Secret Name
        id: set-env-vars
        run: |
          echo "SECRET_NAME=env_docker_local" >> $GITHUB_ENV
          echo "${{ secrets.ENV_BE_DEV }}" > .env
          echo "SIGNOZ_INGESTION_KEY=${{ secrets.SIGNOZ_INGESTION_KEY }}" >> .env
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV_JSON }}

      - name: Setup Google Cloud SDK and Set GCP Project
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Change to Correct Project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID_DEV }}
      - name: Confirm active gcloud project
        run: gcloud config get-value project

      - name: Validate .env content
        run: |
          if [[ ! -s .env ]]; then
            echo ".env file EMPTY."
            exit 1
          fi
      # - name: Push .env to Secret Manager
      #   run: |
      #     if gcloud secrets describe "$SECRET_NAME" >/dev/null 2>&1; then
      #       echo "Secret $SECRET_NAME exists, adding new version..."
      #       gcloud secrets versions add "$SECRET_NAME" --data-file=.env
      #     else
      #       echo "Secret $SECRET_NAME does not exist, creating..."
      #       gcloud secrets create "$SECRET_NAME" --data-file=.env --replication-policy=automatic
      #     fi

      - name: Set up Docker Buildx             # Docker Buildx ÏÑ§Ï†ï
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Hub              # Docker Hub Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image      # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            jchanho99/backend-develop:latest
          cache-from: type=gha,scope=build-backend-develop
          cache-to: type=gha,mode=max,scope=build-backend-develop

  build-prod:                                   # main Î∏åÎûúÏπòÏóêÏÑú Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
    name: Build and Push Docker (prod)

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3              # ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ

      - name: Set GCP Secret Name based on branch
        id: set-env-vars
        run: |
          echo "SECRET_NAME=env_docker_prod" >> $GITHUB_ENV
          echo "${{ secrets.ENV_BE_PROD }}" > .env
          echo "SIGNOZ_INGESTION_KEY=${{ secrets.SIGNOZ_INGESTION_KEY }}" >> .env

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD_JSON }}

      - name: Setup Google Cloud SDK and Set GCP Project
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Change to Correct Project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID_PROD }}
      - name: Confirm active gcloud project
        run: gcloud config get-value project

      - name: Validate .env content
        run: |
          if [[ ! -s .env ]]; then
            echo ".env file EMPTY."
            exit 1
          fi
      - name: Push .env to Secret Manager
        run: |
          if gcloud secrets describe "$SECRET_NAME" >/dev/null 2>&1; then
            echo "Secret $SECRET_NAME exists, adding new version..."
            gcloud secrets versions add "$SECRET_NAME" --data-file=.env
          else
            echo "Secret $SECRET_NAME does not exist, creating..."
            gcloud secrets create "$SECRET_NAME" --data-file=.env --replication-policy=automatic
          fi

      - name: Set up Docker Buildx             # Docker Buildx ÏÑ§Ï†ï
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Hub              # Docker Hub Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image to Docker Hub     # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            jchanho99/backend-prod:latest
          cache-from: type=gha,scope=build-backend-prod
          cache-to: type=gha,mode=max,scope=build-backend-prod


  deploy-dev:
    name: BE Docker Î∞∞Ìè¨ (Develop)
    needs: [build-dev]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-status.outputs.status }}
    steps:
      - uses: actions/checkout@v3              # ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ

      - name: Deploy Backend (Develop) via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_DEV }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "GCP Ïù∏Ï¶ù Î∞è Docker Î°úÍ∑∏Ïù∏"
            echo '${{ secrets.GCP_SA_KEY_GCS_BASE64 }}' | base64 -d > ~/leafresh-gcs.json
            sudo mv ~/leafresh-gcs.json /home/${{ secrets.SSH_USER }}/backend/app/leafresh-gcs.json
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/${{ secrets.SSH_USER }}/backend/app/leafresh-gcs.json
            sudo chmod 600 /home/${{ secrets.SSH_USER }}/backend/app/leafresh-gcs.json
            echo "Secret ManagerÏóêÏÑú .env Í∏∞Ï†∏Ïò§Í∏∞"
            # .envÎ•º Ìôà ÎîîÎ†âÌÜ†Î¶¨Ïóê Ïö∞ÏÑ† Ï†ÄÏû•
            if ! gcloud secrets versions access latest \
              --secret="env_docker_local" \
              --project="${{ secrets.GCP_PROJECT_ID_DEV }}" > ~/env-be-dev.tmp; then
              echo ".env ÌååÏùº Îã§Ïö¥Î°úÎìú Ïã§Ìå®"
              exit 1
            fi
            
            # Í∂åÌïú ÏàòÏ†ï ÌõÑ Ïï± ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
            sudo mv ~/env-be-dev.tmp /home/${{ secrets.SSH_USER }}/backend/app/.env
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/${{ secrets.SSH_USER }}/backend/app/.env
            sudo chmod 600 /home/${{ secrets.SSH_USER }}/backend/app/.env
            
            echo "[DEV] ÌôòÍ≤Ω Î∞∞Ìè¨ Ï§ë"
            cd /home/${{ secrets.SSH_USER }}/backend
            sudo docker compose down --rmi all
            sudo docker compose pull
            sudo docker compose up -d
            sudo docker compose ps
      
      - name: Set Status (Dev)
        id: set-status
        if: success()
        run: echo "status=success" >> "$GITHUB_OUTPUT"

      - name: Set Status (Dev Failure)
        if: failure() && steps.deploy-dev.outcome == 'failure' # deploy-stepÏù¥ Ïã§Ìå®ÌñàÏùÑ ÎïåÎßå
        run: echo "status=failure" >> "$GITHUB_OUTPUT"

  deploy-prod:
    name: BE Docker Î∞∞Ìè¨ (Prod)
    needs: [build-prod]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.set-status.outputs.status }}
    steps:
      
  notify:
    name: Discord Notification
    needs: [deploy-dev, deploy-prod]
    if: |
        needs.deploy-dev.result != 'skipped' ||
        needs.deploy-prod.result != 'skipped'
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Message
        run: | 
          MESSAGE=""
          # Dev Í≤∞Í≥º Ï≤òÎ¶¨
          if [[ "${{ needs.deploy-dev.result }}" != 'skipped' ]]; then
            STATUS_DEV="${{ needs.deploy-dev.outputs.status }}"
            if [ "$STATUS_DEV" = "success" ]; then
              MESSAGE="${MESSAGE}‚úÖ \`[FE dev]\` Î∞∞Ìè¨ ÏôÑÎ£å\n"
            elif [ "$STATUS_DEV" = "failure" ]; then
              MESSAGE="${MESSAGE}üö® \`[FE dev]\` Î∞∞Ìè¨ Ïã§Ìå®\n"
            fi
          fi
          # Prod Í≤∞Í≥º Ï≤òÎ¶¨
          if [[ "${{ needs.deploy-prod.result }}" != 'skipped' ]]; then
            STATUS_PROD="${{ needs.deploy-prod.outputs.status }}"
            if [ "$STATUS_PROD" = "success" ]; then
              MESSAGE="${MESSAGE}‚úÖ \`[FE prod]\` Î∞∞Ìè¨ ÏôÑÎ£å\n"
            elif [ "$STATUS_PROD" = "failure" ]; then
              MESSAGE="${MESSAGE}üö® \`[FE prod]\` Î∞∞Ìè¨ Ïã§Ìå®\n"
            fi
          fi
          if [ -z "$MESSAGE" ]; then
            MESSAGE="‚ö†Ô∏è Î∞∞Ìè¨ ÏÉÅÌÉú Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
