name: Generate and Deploy API Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'build.gradle'
      - '.github/workflows/generate-api-docs.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Build Application
      run: |
        echo "🔨 Building application..."
        ./gradlew clean build -x test --no-daemon --stacktrace
        
        echo "📦 Checking JAR file..."
        ls -la build/libs/
        JAR_FILE=$(find build/libs -name "*.jar" | head -1)
        echo "JAR file: $JAR_FILE"
        echo "JAR size: $(du -h $JAR_FILE | cut -f1)"
      
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install pyyaml requests
        
    - name: Start Application and Generate API Docs
      timeout-minutes: 10
      run: |
        echo "🚀 Starting Spring Boot application with swagger profile..."
        
        # 더 명확한 JVM 설정으로 애플리케이션 실행
        java -server \
             -Xmx1024m \
             -Dspring.profiles.active=swagger \
             -Dserver.port=8080 \
             -Dspring.datasource.url=jdbc:h2:mem:testdb \
             -Dspring.datasource.driver-class-name=org.h2.Driver \
             -Dspring.jpa.hibernate.ddl-auto=create-drop \
             -Djwt.secret=dGVzdC1zZWNyZXQta2V5LWZvci1zd2FnZ2VyLWRvY3VtZW50YXRpb24tZ2VuZXJhdGlvbg== \
             -Dkakao.client-id=dummy-client-id \
             -Dkakao.client-secret=dummy-client-secret \
             -Dlogging.level.org.springframework.cloud.gcp=WARN \
             -Dlogging.level.com.google.cloud=WARN \
             -Dlogging.level.redis=WARN \
             -Dlogging.level.org.redisson=WARN \
             -jar build/libs/*.jar > app.log 2>&1 &
        APP_PID=$!
        echo "Started application with PID: $APP_PID"
        
        # 애플리케이션이 시작될 때까지 대기 (더 긴 타임아웃)
        echo "⏳ Waiting for application to be ready..."
        READY=false
        for i in {1..50}; do
          if curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
            echo "✅ Application is ready after $((i*6)) seconds!"
            READY=true
            break
          fi
          echo "Attempt $i/50... (waiting 6s)"
          sleep 6
          
          # 디버그 모드에서는 로그 일부 출력
          if [ "${{ inputs.debug }}" = "true" ] && [ $((i % 5)) -eq 0 ]; then
            echo "==== Recent logs ===="
            tail -20 app.log 2>/dev/null || echo "No logs yet"
            echo "==================="
          fi
        done
        
        if [ "$READY" = false ]; then
          echo "❌ Application failed to start within timeout. Logs:"
          echo "==== FULL APPLICATION LOG ===="
          cat app.log
          echo "==== END LOG ===="
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # 추가 대기 시간 (완전한 초기화 보장)
        echo "⌛ Waiting additional time for full startup..."
        sleep 15
        
        # API 엔드포인트 확인
        echo "🔍 Checking available endpoints..."
        curl -s http://localhost:8080/actuator/health | jq . 2>/dev/null || echo "Health check response received"
        
        # OpenAPI JSON 다운로드
        echo "📥 Downloading OpenAPI specification..."
        MAX_RETRIES=3
        for attempt in $(seq 1 $MAX_RETRIES); do
          if curl -f -H "Accept: application/json" http://localhost:8080/v3/api-docs -o openapi-temp.json; then
            echo "✅ OpenAPI spec downloaded successfully on attempt $attempt"
            break
          else
            echo "❌ Failed to download OpenAPI spec (attempt $attempt/$MAX_RETRIES)"
            if [ $attempt -eq $MAX_RETRIES ]; then
              echo "Final attempt failed. Application logs:"
              tail -50 app.log
              echo "Available endpoints:"
              curl -s http://localhost:8080/actuator || echo "No actuator response"
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
            sleep 5
          fi
        done
        
        # JSON 파일 검증
        echo "🔍 Validating downloaded OpenAPI JSON..."
        if ! python3 -c "import json; json.load(open('openapi-temp.json'))"; then
          echo "❌ Invalid JSON file downloaded"
          echo "File content:"
          head -20 openapi-temp.json
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # JSON을 YAML로 변환
        echo "📝 Converting JSON to YAML..."
        python3 << 'EOF'
        import json
        import yaml
        import sys
        
        try:
            # JSON 파일 읽기
            with open('openapi-temp.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # 기본 검증
            if not data.get('openapi'):
                print("❌ Invalid OpenAPI format: missing 'openapi' field")
                sys.exit(1)
                
            if not data.get('info'):
                print("❌ Invalid OpenAPI format: missing 'info' field")
                sys.exit(1)
                
            if not data.get('paths'):
                print("❌ No API paths found in OpenAPI specification")
                sys.exit(1)
            
            # YAML 파일로 저장
            with open('docs/openapi.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
            
            print(f"✅ OpenAPI YAML generated successfully!")
            print(f"📊 API paths found: {len(data['paths'])}")
            print(f"📋 API title: {data['info'].get('title', 'Unknown')}")
            print(f"📌 API version: {data['info'].get('version', 'Unknown')}")
            
        except Exception as e:
            print(f"❌ Error converting JSON to YAML: {e}")
            sys.exit(1)
        EOF
        
        # 애플리케이션 중지
        echo "🛑 Stopping application..."
        kill $APP_PID 2>/dev/null || true
        sleep 5
        
        # 프로세스가 여전히 실행 중이면 강제 종료
        if kill -0 $APP_PID 2>/dev/null; then
          echo "Force killing application..."
          kill -9 $APP_PID 2>/dev/null || true
        fi
        
        # 임시 파일 정리
        rm -f openapi-temp.json
        
        echo "📊 Generated OpenAPI spec statistics:"
        wc -l docs/openapi.yaml
        echo "File size: $(du -h docs/openapi.yaml | cut -f1)"
        
        echo "🔍 First few lines of generated spec:"
        head -20 docs/openapi.yaml
        
    - name: Validate Generated Docs
      run: |
        if [ ! -f "docs/openapi.yaml" ]; then
          echo "❌ OpenAPI YAML file not found!"
          exit 1
        fi
        
        # 파일 크기 검증 (너무 작으면 문제)
        FILE_SIZE=$(wc -l < docs/openapi.yaml)
        if [ $FILE_SIZE -lt 50 ]; then
          echo "❌ Generated OpenAPI spec seems too small (${FILE_SIZE} lines)!"
          echo "Content:"
          cat docs/openapi.yaml
          exit 1
        fi
        
        # YAML 구문 검증
        if ! python3 -c "import yaml; yaml.safe_load(open('docs/openapi.yaml'))"; then
          echo "❌ Generated YAML file is invalid!"
          exit 1
        fi
        
        # OpenAPI 기본 필드 검증
        python3 << 'EOF'
        import yaml
        import sys
        
        with open('docs/openapi.yaml', 'r') as f:
            data = yaml.safe_load(f)
        
        if not data.get('openapi'):
            print("❌ Missing OpenAPI version field")
            sys.exit(1)
            
        if not data.get('info'):
            print("❌ Missing info section")
            sys.exit(1)
            
        if not data.get('paths'):
            print("❌ No API paths found")
            sys.exit(1)
            
        print(f"✅ OpenAPI documentation validated successfully!")
        print(f"📊 Total API endpoints: {len(data['paths'])}")
        EOF
      
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Success Notification
      run: |
        echo "🎉 API Documentation deployment completed!"
        echo "📖 Documentation URL: https://100-hours-a-week.github.io/15-Leafresh-BE/"
        echo "🔗 Direct link: ${{ steps.deployment.outputs.page_url }}"
        
        # 생성된 문서 통계
        if [ -f "docs/openapi.yaml" ]; then
          LINES=$(wc -l < docs/openapi.yaml)
          SIZE=$(du -h docs/openapi.yaml | cut -f1)
          echo "📊 Generated OpenAPI spec: ${LINES} lines, ${SIZE}"
        fi
