name: Generate and Deploy Swagger Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - '.github/workflows/swagger-docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-and-deploy-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: ./gradlew build -x test

    - name: Start application in background
      run: |
        echo "🚀 Starting application for documentation generation..."
        nohup ./gradlew runSwagger > app.log 2>&1 &
        echo $! > app.pid
        echo "Application PID: $(cat app.pid)"

    - name: Wait for application to be ready
      run: |
        echo "⏳ Waiting for application to start..."
        timeout=120
        count=0
        
        while [ $count -lt $timeout ]; do
          if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "✅ Application is ready!"
            break
          fi
          
          if [ $count -eq $(($timeout - 1)) ]; then
            echo "❌ Application failed to start within $timeout seconds"
            echo "📋 Application logs:"
            cat app.log
            exit 1
          fi
          
          echo "⏱️ Waiting... ($((count + 1))/$timeout)"
          sleep 1
          count=$((count + 1))
        done

    - name: Generate OpenAPI specification
      run: |
        echo "📄 Downloading OpenAPI specification..."
        
        # API docs 다운로드 with retry
        for i in {1..5}; do
          if curl -f -s -o docs/openapi.json http://localhost:8080/v3/api-docs; then
            echo "✅ OpenAPI spec downloaded successfully"
            break
          fi
          echo "⚠️ Attempt $i/5 failed, retrying..."
          sleep 2
        done
        
        # 파일 검증
        if [ ! -f docs/openapi.json ] || [ ! -s docs/openapi.json ]; then
          echo "❌ Failed to generate OpenAPI spec or file is empty"
          exit 1
        fi
        
        echo "📊 OpenAPI spec info:"
        ls -la docs/openapi.json
        echo "📄 First few lines:"
        head -n 10 docs/openapi.json

    - name: Stop application
      run: |
        if [ -f app.pid ]; then
          PID=$(cat app.pid)
          echo "🛑 Stopping application (PID: $PID)"
          kill $PID 2>/dev/null || true
          wait $PID 2>/dev/null || true
          rm -f app.pid
        fi

    - name: Generate Swagger UI
      uses: Legion2/swagger-ui-action@v1
      with:
        output: docs
        spec-file: docs/openapi.json

    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4

    - name: Upload artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Display deployment URL
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🎉 Swagger documentation has been deployed!"
        echo "📖 Access your API documentation at: ${{ steps.deployment.outputs.page_url }}"
